{"version":3,"sources":["components/Business/Business.jsx","components/BusinessList/BusinessList.jsx","components/SearchBar/SearchBar.js","data/FakeData.js","components/App/App.jsx","util/Search.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","SearchBar","state","term","location","handleTermChange","bind","handleLocationChange","handleSearch","ev","setState","target","value","searchYelp","preventDefault","onChange","placeholder","onClick","App","filter","Search","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5fa04f44.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n  render() {\n    return (\n      <div className='Business'>\n        <div className='image-container'>\n          <img src={this.props.business.imageSrc} alt='' />\n        </div>\n        <h2>{this.props.business.name}</h2>\n        <div className='Business-information'>\n          <div className='Business-address'>\n            <p>{this.props.business.address}</p>\n            <p>{this.props.business.city}</p>\n            <p>{this.props.business.zipCode}</p>\n          </div>\n          <div className='Business-reviews'>\n            <h3>{this.props.business.category}</h3>\n            <h3 className='rating'> {this.props.business.rating}</h3>\n            <p>{this.props.business.reviewCount}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Business;\n","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n  render() {\n    return (\n      <div className='BusinessList'>\n        {this.props.businesses.map((business) => {\n          return <Business business={business} key={business.name} />;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default BusinessList;\n","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { term: '', location: '' };\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  handleTermChange(ev) {\n    this.setState({ term: ev.target.value });\n  }\n\n  handleLocationChange(ev) {\n    this.setState({ location: ev.target.value });\n  }\n\n  handleSearch(ev) {\n    this.props.searchYelp(this.state.term, this.state.location);\n    ev.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className='SearchBar'>\n        <div className='SearchBar-fields'>\n          <input\n            onChange={this.handleTermChange}\n            placeholder='Search Category'\n          />\n          <input\n            onChange={this.handleLocationChange}\n            placeholder='Which State?'\n          />\n        </div>\n        <div className='SearchBar-submit' onClick={this.handleSearch}>\n          <a>Let's Go</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","export const businesses = [\n  {\n    imageSrc:\n      'https://images.unsplash.com/photo-1484723091739-30a097e8f929?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=774&q=80',\n    name: 'Banana Bread',\n    address: '1010 Paddington Way',\n    city: 'Flavortown',\n    state: 'NY',\n    zipCode: '10101',\n    category: 'Italian',\n    rating: 4.5,\n    reviewCount: 90,\n  },\n  {\n    imageSrc:\n      'https://images.unsplash.com/photo-1506354666786-959d6d497f1a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1500&q=80',\n    name: 'Pizza',\n    address: '3130 Piedmont Road',\n    city: 'Atlanta',\n    state: 'NY',\n    zipCode: '30305',\n    category: 'Italian',\n    rating: 4.7,\n    reviewCount: 100,\n  },\n\n  {\n    imageSrc:\n      'https://images.unsplash.com/photo-1540189549336-e6e99c3679fe?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=668&q=80',\n    name: 'Salad',\n    address: '3130 Piedmont Road',\n    city: 'San Francisco',\n    state: 'CA',\n    zipCode: '40593',\n    category: 'Italian',\n    rating: 3.1,\n    reviewCount: 30,\n  },\n\n  {\n    imageSrc:\n      'https://images.unsplash.com/photo-1540189549336-e6e99c3679fe?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=668&q=80',\n    name: 'Salmon Fish',\n    address: '2130 Lancaster Road',\n    city: 'San Francisco',\n    state: 'CA',\n    zipCode: '40593',\n    category: 'French',\n    rating: 4.5,\n    reviewCount: 200,\n  },\n\n  {\n    imageSrc:\n      'https://images.unsplash.com/photo-1476718406336-bb5a9690ee2a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=668&q=80',\n    name: 'Chicken Soup',\n    address: '1130 BatonRouge Road',\n    city: 'Lancaster',\n    state: 'PA',\n    zipCode: '70593',\n    category: 'Japanese',\n    rating: 3.5,\n    reviewCount: 100,\n  },\n  {\n    imageSrc:\n      'https://images.unsplash.com/photo-1481931098730-318b6f776db0?ixlib=rb-1.2.1&auto=format&fit=crop&w=674&q=80',\n    name: 'Pasta',\n    address: '1130 Maryland Road',\n    city: 'Lancaster',\n    state: 'PA',\n    zipCode: '70593',\n    category: 'Italian',\n    rating: 3.0,\n    reviewCount: 20,\n  },\n];\n","import React from 'react';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport './App.css';\nimport { Search } from '../../util/Search';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      businesses: [],\n    };\n\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location) {\n    const businesses = Search(term, location);\n    this.setState({ businesses });\n  }\n  render() {\n    return (\n      <div className='App'>\n        <h1>Restaurants Search</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { businesses } from '../data/FakeData';\n\nexport function Search(term, location) {\n  let results = [];\n  if (term && location) {\n    results = businesses.filter((business) => {\n      if (business.category == term && business.state == location) return true;\n    });\n  } else {\n    results = businesses.filter((business) => {\n      if (business.category == term || business.state == location) return true;\n    });\n  }\n  return results;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}